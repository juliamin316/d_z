import unittest
from unittest.mock import patch
from io import StringIO
import requests
from bs4 import BeautifulSoup

# –ú–æ–∫-–∫–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å
class MockResponse:
    def __init__(self, text):
        self.text = text

class TestEmojiCategories(unittest.TestCase):

    def setUp(self):
        self.url = 'https://emojipedia.org/'
        self.categories = ["nature", "music", "science"]

    @patch('sys.stdout', new_callable=StringIO)  # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å
    @patch('requests.get')  # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã get()
    def test_emoji_categories(self, mock_get, mock_stdout):
        mock_get.side_effect = [
            MockResponse('<div class="emoji-wrap"><a class="emoji">üå≤</a><div class="annotation">Evergreen Tree</div></div>'),
            MockResponse('<div class="emoji-wrap"><a class="emoji">üéµ</a><div class="annotation">Musical Note</div></div>'),
            MockResponse('<div class="emoji-wrap"><a class="emoji">üî¨</a><div class="annotation">Microscope</div></div>')
        ]

        expected_output = [
            "Nature category:\nüå≤: Evergreen Tree\n\n",
            "Music category:\nüéµ: Musical Note\n\n",
            "Science category:\nüî¨: Microscope\n\n"
        ]

        # –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—è –≤—ã–≤–æ–¥
        with patch('sys.stdout', new=StringIO()) as fake_stdout:
            import script  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∫–æ–¥

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞
            output = fake_stdout.getvalue()
            self.assertEqual(output, ''.join(expected_output))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ requests.get()
        expected_calls = [
            unittest.mock.call('https://emojipedia.org/nature/'),
            unittest.mock.call('https://emojipedia.org/music/'),
            unittest.mock.call('https://emojipedia.org/science/')
        ]
        mock_get.assert_has_calls(expected_calls)

if __name__ == '__main__':
    unittest.main()
